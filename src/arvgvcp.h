#ifndef ARV_GVCP_H
#define ARV_GVCP_H

#include <arv.h>

G_BEGIN_DECLS

#define ARV_GVCP_PORT	3956

#define ARV_GVCP_DISCOVER_IP_OFFSET			0x24
#define ARV_GVCP_DISCOVER_SUPPLIER_NAME_OFFSET		0x48
#define ARV_GVCP_DISCOVER_MODEL_NAME_OFFSET		0x68
#define ARV_GVCP_DISCOVER_CAMERA_NAME_OFFSET		0xE8

typedef enum {
	ARV_GVCP_PACKET_TYPE_ANSWER = 		0x0000,
	ARV_GVCP_PACKET_TYPE_COMMAND = 		0x4201
} ArvGvcpPacketType;

typedef enum {
	ARV_GVCP_COMMAND_DISCOVER_CMD =		0x0002,
	ARV_GVCP_COMMAND_DISCOVER_ANS =		0x0003,
	ARV_GVCP_COMMAND_BYE_CMD = 		0x0004,
	ARV_GVCP_COMMAND_BYE_ANS = 		0x0005,
	ARV_GVCP_COMMAND_REGISTER_READ_CMD =	0x0080,
	ARV_GVCP_COMMAND_REGISTER_READ_ANS =	0x0081,
	ARV_GVCP_COMMAND_REGISTER_WRITE_CMD =	0x0082,
	ARV_GVCP_COMMAND_REGISTER_WRITE_ANS =	0x0083,
	ARV_GVCP_COMMAND_STRING_READ_CMD =	0x0084,
	ARV_GVCP_COMMAND_STRING_READ_ANS =	0x0085,
	ARV_GVCP_COMMAND_STRING_WRITE_CMD =	0x0086,
	ARV_GVCP_COMMAND_STRING_WRITE_ANS =	0x0087
} ArvGvcpCommand;

typedef struct {
	guint16 packet_type;
	guint16 command;
	guint16 size;
	guint16 count;
}  __attribute__((__packed__)) ArvGvHeader;

typedef struct {
	ArvGvHeader header;
	unsigned char data[];
} ArvGvControlPacket;

G_END_DECLS

#endif
